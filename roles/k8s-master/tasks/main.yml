- name: Install kubernetes packages
  yum: name={{item}}  state=present
  with_items:
  - kubernetes
  - etcd

- name: Copy CA folder from first master SERVER
  command: "rsync -arvce 'ssh -o StrictHostKeyChecking=no' \
    --rsync-path='sudo rsync'  {{k8s_admin_user}}@{{inventory_hostname}}:{{cert_ca_dir}}/ \
    {{cert_ca_dir_tmp}}/"
  run_once: yes
  delegate_to: localhost
  become: no
  tags: certs

- name: Create folder for certificates
  file: path={{item}} state=directory mode="u=rwX,g=rX,o=rX"
  with_items:
  - "{{kube_certs_dir}}"
  - "{{etcd_certs_dir}}"
  - "{{token_dir}}"
  tags: certs

- name: Copy CA cert all nodes
  copy:
    src: "{{cert_ca_dir_tmp}}/{{item}}/ca.pem"
    dest: "{{k8s_cert_dir}}/{{item}}/ca.pem"
    owner: root
    group: root
    mode: 0644
  with_items:
  - kubernetes
  - etcd
  tags: certs

- name: Copy own etcd certs
  copy:
    src: "{{cert_ca_dir_tmp}}/{{item}}"
    dest: "{{k8s_cert_dir}}/{{item}}"
    owner: root
    group: root
    mode: 0644
  with_items:
  - "etcd/{{inventory_hostname}}.pem"
  - "etcd/{{inventory_hostname}}-key.pem"
  tags:
  - certs
  - etcd

- name: Copy tokens file
  copy:
    src: "{{cert_ca_dir_tmp}}/tokens/known_tokens.csv"
    dest: "{{token_dir}}/known_tokens.csv"
    owner: root
    group: root
    mode: 0644
  tags:
  - tokens


- name: Generate /etc/etcd/etcd.conf
  template: src=etc/etcd/etcd.conf.j2 dest=/etc/etcd/etcd.conf backup=yes
  tags: etcd
  notify:
  - restart etcd service
  - check etcd cluster health

- name: Force all notified handlers to run at this point, not waiting for normal sync points
  meta: flush_handlers

- name: Copy own kube-apiserver certs
  copy:
    src: "{{cert_ca_dir_tmp}}/{{item}}"
    dest: "{{k8s_cert_dir}}/{{item}}"
    owner: root
    group: root
    mode: 0644
  with_items:
  - "kubernetes/apiserver.pem"
  - "kubernetes/apiserver-key.pem"
  tags:
  - certs
  - kube-apiserver

- name: Load API Certs
  set_fact:
    cert_ca_crt: "{{ lookup('pipe', 'cat {{cert_ca_dir}}/kubernetes/ca.pem | base64') }}"
    cert_admin_crt: "{{ lookup('pipe', 'cat {{cert_ca_dir}}/kubernetes/admin.pem | base64') }}"
    cert_admin_key:  "{{ lookup('pipe', 'cat {{cert_ca_dir}}/kubernetes/admin-key.pem | base64') }}"
  run_once: yes

- name: Generate /etc/kubernetes/apiserver
  template: src=etc/kubernetes/apiserver.j2 dest=/etc/kubernetes/apiserver backup=yes
  tags: kube-apiserver
  notify:
  - restart kube-apiserver service

- name: Start and enable kube-apiserver
  service: name=kube-apiserver state=restarted enabled=yes
  tags: kube-apiserver

- name: Generate /etc/kubernetes/config
  template: src={{item.src}} dest={{item.dest}} backup=yes
  with_items:
  - src: etc/kubernetes/config.j2
    dest: /etc/kubernetes/config
  - src: etc/kubernetes/controller-manager.j2
    dest: /etc/kubernetes/controller-manager
  - src: etc/kubernetes/controller-manager.j2
    dest: /etc/kubernetes/controller-manager
  - src: etc/kubernetes/scheduler.j2
    dest: /etc/kubernetes/scheduler
  - src: etc/kubernetes/proxy.j2
    dest: /etc/kubernetes/proxy
  - src: etc/kubernetes/kubeconfig.j2
    dest: /etc/kubernetes/admin.kubeconfig
  tags:
  - kube-apiserver
  - kube-controller-manager
  - kube-scheduler
  - kube-proxy
  notify:
  - restart kube services

- name: Start {{item}} service
  service: name={{item}} state=restarted enabled=yes
  with_items:
  - kube-controller-manager
  - kube-scheduler
  - kube-proxy
  tags:
  - kube-apiserver
  - kube-controller-manager
  - kube-scheduler
  - kube-proxy

- name: Check flannel etcd prefix exists
  command: "{{etcdctl_cmd}} get {{flannel_etcd_prefix}}"
  register: check_flannel_etcd_prefix
  failed_when: '"Key not found" not in check_flannel_etcd_prefix.stderr'
  run_once: yes
  ignore_errors: yes
  tags: flannel

- name: Create flannel etcd prefix
  command: "{{etcdctl_cmd}} mk {{flannel_etcd_prefix}}/config  \'{ \"Network\": \"{{flannel_node_network}}\", \"SubnetLen\": {{flannel_node_subnetlen}}, \"Backend\": {\"Type\": \"{{flannel_node_backend_type}}\"} }\'"
  when: '"Key not found" in check_flannel_etcd_prefix.stderr'
  run_once: yes
  tags: flannel

- name: Force all notified handlers to run at this point, not waiting for normal sync points
  meta: flush_handlers
